Program: Body;

Sep:
- newline: "\n";
- semicolon: ";";

Body:
- more: Statement Sep Body;
- empty: ;

MaybeEoln:
- yes: "\n";
- no: ;

Statement:
- decl: "var" NonemptyDeclarations;
- if: "if" Expression MaybeEoln "then" MaybeEoln Body MaybeElse "end"
- shortif: "if" Expression "=>" Statement;
- while: "while" Expression MaybeEoln LoopBody;
- for: "for" MaybeIdentIn Expression MaybeRangeEnd MaybeEoln LoopBody;
- exit: "exit";
- asg: Reference ":=" Expression;
- print: "print" MaybeCommaItems;
- exp: Expression;
- nop: ;

MaybeRangeEnd:
- yes: ".." Expression
- no: ;

MaybeIdentIn:
- yes: ident "in";
- no: ;

MaybeElse:
- yes: "else" MaybeEoln Body;
- no: ;

LoopBody: "loop" MaybeEoln Body "end";

NonemptyDeclarations: Declaration Declarations;
Declaration: ident MaybeInit;
MaybeInit:
- yes: ":=" Expression;
- no: ;
Declarations:
- more: Declaration Declarations;
- empty: ;

Reference: ident Accessors;
Accessors:
- more: Accessor Accessors;
- empty: ;
Accessor:
- index: "[" Expression "]";
- call: "(" MaybeCommaItems ")";
- member_name: "." ident;
- member_index: "." int;

MaybeCommaItems:
- yes: CommaItems;
- no: ;
CommaItems:
- yes: Expression MoreCommaItems;
- no: ;
MoreCommaItems:
- yes: "," Expression MoreCommaItems;
- no: ;

Expression: Relation ExpressionTail;
ExpressionTail:
- yes: LogicOp Relation ExpressionTail;
- no: ;
LogicOp:
- and: "and";
- or: "or";
- xor: "xor";

Relation: Sum MaybeBinRelation;
MaybeBinRelation:
- yes: RelationOp Sum;
- no: ;
RelationOp:
- gt: ">";
- ge: ">=";
- lt: "<";
- le: "<=";
- eq: "=";
- ne: "/=";

Sum: Term SumTail;
SumTail:
- yes: SumOp Term SumTail;
- no: ;
SumOp:
- plus: "+";
- minus: "-";

Term: Unary TermTail;
TermTail:
- yes: TermOp Unary TermTail;
- no: ;
TermOp:
- mul: "*";
- div: "/";

Unary:
- positive: "+" Primary;
- negative: "-" Primary;
- not: "not" Primary;
- typecheck: Reference "is" TypeIndicator;
- ref: Reference;
- prim: Primary;

TypeIndicator:
- int: "int";
- real: "real";
- bool: "bool";
- string: "string";
- none: "none";
- func: "func";
- array: "[" "]";
- tuple: "{" "}";

Primary:
- paren: "(" Expression ")";
- literal: Literal;
- func: FunctionLiteral;

Literal:
- int: int;
- real: real;
- string: str;
- bool: Boolean;
- tuple: "{" TupleElems "}";
- array: "[" MaybeCommaItems "]";
- none: "none";

TupleElems:
- yes: TupleElem MoreTupleElems;
- no: ;
MoreTupleElems:
- yes: "," TupleElem MoreTupleElems;
- no: ;
TupleElem:
- named: ident ":=" Expression;
- unnamed: Expression;

FunctionLiteral: "func" MaybeParams MaybeEoln FunBody;
MaybeParams:
- yes: "(" ident MoreCommaIdents ")";
- no: ;
MoreCommaIdents:
- yes: "," ident MoreCommaIdents;
- no: ;
FunBody:
- long: "is" MaybeEoln Body "end";
- short: "=>" Expression;
